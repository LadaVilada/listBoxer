/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.mycompany.listBoxer.panel;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;

import org.apache.commons.lang3.StringUtils;

import com.mycompany.listBoxer.dto.RangeType;
import com.mycompany.listBoxer.dto.SelectionCriteria;
import com.mycompany.listBoxer.services.ListBoxerService;
import com.mycompany.listBoxer.services.impl.ListBoxerServiceImpl;
import com.mycompany.listBoxer.utils.ListBoxerFileFilter;
import com.mycompany.listBoxer.utils.MaskedInputTextField;

/**
 * 
 * @author vbobina
 */
public class ListBoxerForm extends javax.swing.JFrame {

	private static final long serialVersionUID = 5507256401682059615L;

	private ListBoxerService service = new ListBoxerServiceImpl();

	public ListBoxerForm() throws ParseException {
		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 * 
	 * @throws ParseException
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void initComponents() throws ParseException {

		buttonGroup1 = new javax.swing.ButtonGroup();
		buttonGroup2 = new javax.swing.ButtonGroup();
		RangeComboBox = new javax.swing.JComboBox();
		jLabel1 = new javax.swing.JLabel();
		jTextInput = new MaskedInputTextField("*", 4);
		AddButton = new javax.swing.JButton();
		AscendingRadioButton = new javax.swing.JRadioButton();
		DescendingRadioButton = new javax.swing.JRadioButton();
		jTextArea = new JTextArea();
		ClearButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		RecordsLabel = new javax.swing.JLabel();
		TotalLabel = new javax.swing.JLabel();
		AlphabeticCheckBox = new javax.swing.JCheckBox();
		NumericCheckBox = new javax.swing.JCheckBox();
		CombinedCheckBox = new javax.swing.JCheckBox();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		MainMenu = new javax.swing.JMenuBar();
		FileMenuItem = new javax.swing.JMenu();
		OpenItem = new javax.swing.JMenuItem();
		SaveItem = new javax.swing.JMenuItem();
		ExitItem = new javax.swing.JMenuItem();
		EditMenuItem = new javax.swing.JMenu();
		UndoItem = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JPopupMenu.Separator();
		CutItem = new javax.swing.JMenuItem();
		CopyItem = new javax.swing.JMenuItem();
		PasteItem = new javax.swing.JMenuItem();
		HelpMenuItem = new javax.swing.JMenu();
		AboutItem = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		List<String> rangeList = RangeType.getStringValue();
		String[] arrays = new String[rangeList.size()];
		RangeComboBox.setModel(new javax.swing.DefaultComboBoxModel(rangeList
				.toArray(arrays)));
		RangeComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				doFilter();
			}
		});

		jLabel1.setText("Range");

		jTextInput.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField1ActionPerformed(evt);
			}
		});

		jTextArea.setEditable(Boolean.FALSE);

		AddButton.setText("Add to list");
		AddButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				AddButtonActionPerformed(evt);
			}
		});

		buttonGroup1.add(AscendingRadioButton);
		AscendingRadioButton.setText("Ascending");
		AscendingRadioButton.setSelected(Boolean.TRUE);
		AscendingRadioButton.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Sort Order"));
		AscendingRadioButton.setName("Sort Order"); // NOI18N
		AscendingRadioButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				doFilter();
			}
		});

		buttonGroup1.add(DescendingRadioButton);
		DescendingRadioButton.setText("Descending");
		DescendingRadioButton.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Sort Order"));
		DescendingRadioButton.setName("Sort Order"); // NOI18N
		DescendingRadioButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				doFilter();
			}
		});

		ClearButton.setText("Clear list");
		ClearButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent event) {
				ClearButtonActionPerformed(event);
			}
		});

		jLabel2.setText("Records in list : ");

		jLabel3.setText("Total records : ");

		RecordsLabel.setText("0");

		TotalLabel.setText("0");

		buttonGroup2.add(AlphabeticCheckBox);
		AlphabeticCheckBox.setText("Alphabetic");
		AlphabeticCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				AlphabeticCheckBoxActionPerformed(evt);
			}
		});

		buttonGroup2.add(NumericCheckBox);
		NumericCheckBox.setText("Numeric");
		NumericCheckBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				NumericCheckBoxActionPerformed(e);
			}
		});

		buttonGroup2.add(CombinedCheckBox);
		CombinedCheckBox.setText("Combined");
		CombinedCheckBox.setSelected(Boolean.TRUE);
		CombinedCheckBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				CombinedCheckBoxActionPerformed(e);
			}
		});

		jLabel6.setText("Symbols :");

		jLabel7.setText("Sort order :");

		MainMenu.setName(""); // NOI18N
		MainMenu.setRequestFocusEnabled(false);

		FileMenuItem.setText("File");

		OpenItem.setText("Open");
		OpenItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,
				InputEvent.CTRL_MASK));
		OpenItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				List<String> expansions = new ArrayList<String>();
				expansions.addAll(Arrays.asList(new String[] { "lbx", "LBX" }));
				chooser.setFileFilter(new ListBoxerFileFilter(".lbx files",
						expansions));
				int rVal = chooser.showOpenDialog(ListBoxerForm.this);
				if (rVal == JFileChooser.APPROVE_OPTION) {
					File file = new File(chooser.getSelectedFile()
							.getAbsolutePath());
					try {
						FileReader reader = new FileReader(file);
						BufferedReader buffer = new BufferedReader(reader);
						List<String> tmp = service.getContent();
						try {
							service.clearAll();
							String line;
							while ((line = buffer.readLine()) != null) {
								service.getContent().add(line);
							}
							doFilter();
						} catch (IOException ioex) {
							JOptionPane.showMessageDialog(new Frame(),
									String.format("%s", ioex.getMessage()),
									"Error", JOptionPane.ERROR_MESSAGE);
							service.getContent().addAll(tmp);
							doFilter();
						} finally {
							try {
								buffer.close();
								reader.close();
							} catch (IOException e1) {
								e1.printStackTrace();
							}
						}
					} catch (FileNotFoundException ex) {
						JOptionPane.showMessageDialog(new Frame(),
								String.format("%s", ex.getMessage()), "Error",
								JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		});
		FileMenuItem.add(OpenItem);

		SaveItem.setText("Save as");
		SaveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
				InputEvent.CTRL_MASK));
		SaveItem.addActionListener(new ActionListener() {

			@SuppressWarnings("resource")
			@Override
			public void actionPerformed(ActionEvent event) {
				JFileChooser chooser = new JFileChooser();
				List<String> expansions = new ArrayList<String>();
				expansions.addAll(Arrays.asList(new String[] { "lbx", "LBX" }));
				chooser.setFileFilter(new ListBoxerFileFilter(".lbx files",
						expansions));
				int rVal = chooser.showSaveDialog(ListBoxerForm.this);
				if (rVal == JFileChooser.APPROVE_OPTION) {
					File file = new File(String.format("%s.lbx", chooser
							.getSelectedFile().getAbsolutePath()));
					try {
						FileWriter write = new FileWriter(file);
						write.append(service.getAll());
						write.flush();
					} catch (IOException e) {
						JOptionPane.showMessageDialog(new Frame(),
								String.format("%s", e.getMessage()), "Error",
								JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		});
		FileMenuItem.add(SaveItem);

		ExitItem.setText("Exit");
		ExitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,
				InputEvent.CTRL_MASK));
		ExitItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.exit(1);
			}
		});
		FileMenuItem.add(ExitItem);

		MainMenu.add(FileMenuItem);

		EditMenuItem.setText("Edit");

		UndoItem.setText("Undo");
		UndoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
				InputEvent.CTRL_MASK));
		EditMenuItem.add(UndoItem);
		EditMenuItem.add(jSeparator2);

		CutItem.setText("Cut");
		CutItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
				InputEvent.CTRL_MASK));
		EditMenuItem.add(CutItem);

		CopyItem.setText("Copy");
		CopyItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
				InputEvent.CTRL_MASK));
		EditMenuItem.add(CopyItem);

		PasteItem.setText("Paste");
		PasteItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
				InputEvent.CTRL_MASK));
		EditMenuItem.add(PasteItem);

		MainMenu.add(EditMenuItem);

		HelpMenuItem.setText("Help");

		AboutItem.setText("About ListBoxer");
		AboutItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent event) {
				StringBuilder builder = new StringBuilder();
				builder.append("List Boxer\n");
				builder.append("author: LadaVilada.");
				JOptionPane.showMessageDialog(new Frame(), builder.toString());
			}
		});
		HelpMenuItem.add(AboutItem);

		MainMenu.add(HelpMenuItem);

		setJMenuBar(MainMenu);
		MainMenu.getAccessibleContext().setAccessibleName("");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addContainerGap()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel1)
																								.addGap(22,
																										22,
																										22)
																								.addComponent(
																										RangeComboBox,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addComponent(
																						AlphabeticCheckBox)
																				.addComponent(
																						NumericCheckBox)
																				.addComponent(
																						CombinedCheckBox)
																				.addComponent(
																						jLabel6)
																				.addComponent(
																						jLabel7)))
												.addComponent(
														AscendingRadioButton)
												.addComponent(
														DescendingRadioButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														136,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										22, Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jTextArea,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														198,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														jTextInput,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														198,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(44, 44, 44)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel3)
																								.addGap(0,
																										53,
																										Short.MAX_VALUE))
																				.addGroup(
																						layout.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								false)
																								.addComponent(
																										AddButton,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										101,
																										Short.MAX_VALUE)
																								.addComponent(
																										ClearButton,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE)))
																.addGap(21, 21,
																		21))
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addComponent(
																						TotalLabel)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel2)
																								.addGap(18,
																										18,
																										18)
																								.addComponent(
																										RecordsLabel)))
																.addContainerGap(
																		26,
																		Short.MAX_VALUE)))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(19, 19, 19)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														RangeComboBox,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jLabel1)
												.addComponent(
														jTextInput,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														31,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														AddButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														31,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(32, 32, 32)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		ClearButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		34,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(
																						jLabel2)
																				.addComponent(
																						RecordsLabel))
																.addGap(18, 18,
																		18)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(
																						jLabel3)
																				.addComponent(
																						TotalLabel))
																.addGap(38, 38,
																		38))
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				false)
																				.addComponent(
																						jTextArea,
																						javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(17,
																										17,
																										17)
																								.addComponent(
																										jLabel7)
																								.addGap(1,
																										1,
																										1)
																								.addComponent(
																										AscendingRadioButton,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										23,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(
																										DescendingRadioButton,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										25,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addGap(69,
																										69,
																										69)
																								.addComponent(
																										jLabel6)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																								.addComponent(
																										AlphabeticCheckBox)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(
																										NumericCheckBox)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																								.addComponent(
																										CombinedCheckBox)))
																.addGap(0,
																		22,
																		Short.MAX_VALUE)))));

		pack();
	}

	private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {

	}

	private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {

		if (service.saveContent(jTextInput.getText())) {
			String text = TotalLabel.getText();
			try {
				Integer intText = Integer.valueOf(text);
				intText += 1;
				TotalLabel.setText(intText.toString());
				doFilter();
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(new Frame(),
						String.format("%s", ex.getMessage()), "Error",
						JOptionPane.ERROR_MESSAGE);
			}
			jTextInput.setText(StringUtils.EMPTY);
		} else {
			JOptionPane.showMessageDialog(new Frame(),
					"We can not add empity string!", "Validation error",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void ClearButtonActionPerformed(ActionEvent event) {
		if (service.clearAll()) {
			jTextArea.setText(StringUtils.EMPTY);
			TotalLabel.setText("0");
			RecordsLabel.setText("0");
		} else {
			JOptionPane.showMessageDialog(new Frame(),
					"Error while trying clearing text area", "Error",
					JOptionPane.ERROR_MESSAGE);
		}

	}

	private void AlphabeticCheckBoxActionPerformed(ActionEvent evt) {
		RangeComboBox.setModel(new DefaultComboBoxModel<String>(new String[] {
				RangeType.NONE.getKey(), RangeType.ALL.getKey(),
				RangeType.AM.getKey(), RangeType.NZ.getKey() }));
		jTextInput.setMask("?");
		doFilter();
	}

	private void NumericCheckBoxActionPerformed(ActionEvent evt) {
		RangeComboBox.setModel(new DefaultComboBoxModel<String>(new String[] {
				RangeType.NONE.getKey(), RangeType.ALL.getKey(),
				RangeType.NUM1.getKey(), RangeType.NUM2.getKey(),
				RangeType.NUM3.getKey(), RangeType.NUM4.getKey() }));
		jTextInput.setMask("#");
		doFilter();
	}

	private void CombinedCheckBoxActionPerformed(ActionEvent evt) {
		RangeComboBox.setModel(new DefaultComboBoxModel<String>(new String[] {
				RangeType.NONE.getKey(), RangeType.ALL.getKey(),
				RangeType.AM.getKey(), RangeType.NZ.getKey(),
				RangeType.NUM1.getKey(), RangeType.NUM2.getKey(),
				RangeType.NUM3.getKey(), RangeType.NUM4.getKey() }));
		doFilter();
	}

	public static void main(String args[]) {

		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ListBoxerForm.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ListBoxerForm.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ListBoxerForm.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ListBoxerForm.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new ListBoxerForm().setVisible(true);
				} catch (ParseException e) {

				}
			}
		});
	}

	private void doFilter() {
		SelectionCriteria criteria = new SelectionCriteria();
		criteria.setAlphabetic(AlphabeticCheckBox.isSelected());
		criteria.setNumeric(NumericCheckBox.isSelected());
		criteria.setAsc(AscendingRadioButton.isSelected());
		criteria.setDesc(DescendingRadioButton.isSelected());
		if (CombinedCheckBox.isSelected()) {
			criteria.setAlphabetic(Boolean.TRUE);
			criteria.setNumeric(Boolean.TRUE);
		}
		criteria.setRange(RangeType.fromKey(RangeComboBox.getSelectedItem()
				.toString()));
		List<String> list = service.getByCriteria(criteria);
		RecordsLabel.setText(String.format("%s", list.size()));
		jTextArea.setText(getStringByList(list));
	}

	private String getStringByList(List<String> list) {
		StringBuffer buffer = new StringBuffer();
		for (String item : list) {
			buffer.append(String.format("%s\n", item));
		}
		return buffer.toString();
	}

	private javax.swing.JMenuItem AboutItem;
	private javax.swing.JButton AddButton;
	private javax.swing.JCheckBox AlphabeticCheckBox;
	private javax.swing.JRadioButton AscendingRadioButton;
	private javax.swing.JButton ClearButton;
	private javax.swing.JCheckBox CombinedCheckBox;
	private javax.swing.JMenuItem CopyItem;
	private javax.swing.JMenuItem CutItem;
	private javax.swing.JRadioButton DescendingRadioButton;
	private javax.swing.JMenu EditMenuItem;
	private javax.swing.JMenuItem ExitItem;
	private javax.swing.JMenu FileMenuItem;
	private javax.swing.JMenu HelpMenuItem;
	private javax.swing.JMenuBar MainMenu;
	private javax.swing.JCheckBox NumericCheckBox;
	private javax.swing.JMenuItem OpenItem;
	private javax.swing.JMenuItem PasteItem;
	private javax.swing.JComboBox<String> RangeComboBox;
	private javax.swing.JLabel RecordsLabel;
	private javax.swing.JMenuItem SaveItem;
	private javax.swing.JLabel TotalLabel;
	private javax.swing.JMenuItem UndoItem;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.ButtonGroup buttonGroup2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JPopupMenu.Separator jSeparator2;
	private MaskedInputTextField jTextInput;
	private javax.swing.JTextArea jTextArea;
}
